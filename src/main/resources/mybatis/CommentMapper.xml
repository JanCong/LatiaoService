<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.izanpin.repository.CommentRepository">
    <resultMap id="BaseResultMap" type="com.izanpin.entity.Comment">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="user_avatar" property="userAvatar"/>
        <result column="reply_to_id" property="replyToId"/>
        <result column="article_id" property="articleId"/>
        <result column="number" property="number"/>
        <result column="content" property="content"/>
        <result column="comment_count" property="commentCount"/>
        <result column="like_count" property="likeCount"/>
        <result column="hate_count" property="hateCount"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <resultMap id="ResultMap" type="com.izanpin.entity.Comment">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="user_avatar" property="userAvatar"/>
        <result column="reply_to_id" property="replyToId"/>
        <result column="article_id" property="articleId"/>
        <result column="number" property="number"/>
        <result column="content" property="content"/>
        <result column="comment_count" property="commentCount"/>
        <result column="like_count" property="likeCount"/>
        <result column="hate_count" property="hateCount"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>


    <sql id="Base_Column_List">
        id,
        content,
        author_id,
        author_name,
        author_avatar,
        hash_id,
        comment_count,
        like_count,
        hate_count,
        type,
        status,
        create_time,
        update_time
  </sql>
    <select id="findByTimeline" parameterType="com.izanpin.dto.RequestArticleTimelineDto" resultMap="ResultMap">
        select article.*,
        image.id as image_id, image.article_id, image.url, image.thumbnail_url, image.create_time as image_create_time
        from article left join image on article.id = image.article_id
        where (1=1)
        <if test="sinceId != null and sinceId != 0">
            and (article.id &gt; #{sinceId})
        </if>
        <if test="maxId != null and maxId != 0">
            and (article.id &lt; #{maxId})
        </if>
        <if test="authorId != null and authorId != 0">
            and (article.author_id = #{authorId})
        </if>
        <if test="type != null">
            and (article.type = #{type.value})
        </if>
        <if test="type != null and type.value == 0">
            and (image.id is not null)
        </if>
        <if test="type == null">
            and (article.type = 1 or (article.type = 0 and image.id is not null))
        </if>
        <if test="keyword != null">
            and (article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%'))
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="find" resultMap="ResultMap">
        select article.*,
        image.id as image_id, image.article_id, image.url, image.thumbnail_url, image.create_time as image_create_time
        from article left join image on article.id = image.article_id
        <if test="keyword != null">
            where article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%')
        </if>
        <if test="type == 0">
            and (image.id is not null)
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="findByType" resultMap="ResultMap">
        select article.*,
        image.id as image_id, image.article_id, image.url, image.thumbnail_url, image.create_time as image_create_time
        from article left join image on article.id = image.article_id
        where article.type = #{type,jdbcType=INTEGER}
        <if test="type == 0">
            and (image.id is not null)
        </if>
        <if test="keyword != null">
            and (article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%'))
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="get" parameterType="java.lang.Long" resultMap="ResultMap">
        select article.*,
        image.id as image_id, image.article_id, image.url, image.thumbnail_url, image.create_time as image_create_time
        from article left join image on article.id = image.article_id
        where article.id = #{id,jdbcType=BIGINT}
        limit 1
    </select>
    <select id="getByHashId" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from article
        where hash_id=#{hashId,jdbcType=VARCHAR}
        limit 1
    </select>
    <insert id="addComment" parameterType="com.izanpin.entity.Comment">
        INSERT INTO `comment`
        (`id`
        ,`user_id`
        ,`user_name`
        ,`user_avatar`
        ,`reply_to_id`
        ,`article_id`
        ,`number`
        ,`content`
        ,`comment_count`
        ,`like_count`
        ,`hate_count`
        ,`status`
        ,`create_time`
        ,`update_time`)
        VALUES
        (#{id}
        ,#{userId}
        ,#{userName}
        ,#{userAvatar}
        ,#{replyToId}
        ,#{articleId}
        ,#{number}
        ,#{content}
        ,#{commentCount}
        ,#{likeCount}
        ,#{hateCount}
        ,#{status}
        ,#{createTime}
        ,#{updateTime})
    </insert>
    <update id="increaseCommentCount">
        update comment set comment_count = comment_count + #{count}
        where id = #{id}
    </update>
    <select id="findByArticleId" resultMap="ResultMap">
        SELECT * FROM comment
        WHERE article_id=#{articleId}
        ORDER BY id DESC
    </select>
</mapper>