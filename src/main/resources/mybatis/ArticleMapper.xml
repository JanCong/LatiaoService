<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.izanpin.repository.ArticleRepository">
    <resultMap id="BaseResultMap" type="com.izanpin.entity.Article">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="author_id" jdbcType="BIGINT" property="authorId"/>
        <result column="author_name" jdbcType="VARCHAR" property="authorName"/>
        <result column="author_avatar" jdbcType="VARCHAR" property="authorAvatar"/>
        <result column="hash_id" jdbcType="VARCHAR" property="hashId"/>
        <result column="device" jdbcType="VARCHAR" property="device"/>
        <result column="comment_count" jdbcType="INTEGER" property="commentCount"/>
        <result column="like_count" jdbcType="INTEGER" property="likeCount"/>
        <result column="hate_count" jdbcType="INTEGER" property="hateCount"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="ip" jdbcType="VARCHAR" property="ip"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <resultMap id="ResultMap" type="com.izanpin.entity.Article">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="author_id" jdbcType="BIGINT" property="authorId"/>
        <result column="author_name" jdbcType="VARCHAR" property="authorName"/>
        <result column="author_avatar" jdbcType="VARCHAR" property="authorAvatar"/>
        <result column="hash_id" jdbcType="VARCHAR" property="hashId"/>
        <result column="device" jdbcType="VARCHAR" property="device"/>
        <result column="comment_count" jdbcType="INTEGER" property="commentCount"/>
        <result column="like_count" jdbcType="INTEGER" property="likeCount"/>
        <result column="hate_count" jdbcType="INTEGER" property="hateCount"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="ip" jdbcType="VARCHAR" property="ip"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>

        <collection property="likes" resultMap="likeResult"/>

        <collection property="images" ofType="com.izanpin.entity.Image">
            <id column="image_id" jdbcType="BIGINT" property="id"/>
            <result column="article_id" jdbcType="BIGINT" property="articleId"/>
            <result column="url" jdbcType="VARCHAR" property="url"/>
            <result column="is_video" jdbcType="BIT" property="isVideo"/>
            <result column="thumbnail_url" jdbcType="VARCHAR" property="thumbnailUrl"/>
            <result column="image_create_time" jdbcType="TIMESTAMP" property="createTime"/>
        </collection>
    </resultMap>

    <resultMap type="com.izanpin.entity.Like" id="likeResult">
        <result column="user_id" property="userId"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,
        content,
        author_id,
        author_name,
        author_avatar,
        hash_id,
        device,
        comment_count,
        like_count,
        hate_count,
        type,
        status,
        ip,
        create_time,
        update_time
  </sql>

    <sql id="select_join">
        select article.*,
        image.id as image_id, image.article_id, image.url, image.is_video, image.thumbnail_url, image.create_time as
        image_create_time,
        `like`.user_id
        from article
        left join image on article.id = image.article_id
        left join `like` on article.id = `like`.article_id
    </sql>

    <select id="findByTimeline" parameterType="com.izanpin.dto.RequestArticleTimelineDto" resultMap="ResultMap">
        <include refid="select_join"></include>
        where (1=1)
        <if test="sinceId != null and sinceId != 0">
            and (article.id &gt; #{sinceId})
        </if>
        <if test="maxId != null and maxId != 0">
            and (article.id &lt; #{maxId})
        </if>
        <if test="authorId != null and authorId != 0">
            and (article.author_id = #{authorId})
        </if>
        <if test="type != null">
            and (article.type = #{type.value})
        </if>
        <if test="type != null and type.value == 0">
            and (image.id is not null)
        </if>
        <if test="type == null">
            and (article.type = 1 or (article.type = 0 and image.id is not null))
        </if>
        <if test="keyword != null">
            and (article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%'))
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="findFriendByUserId" resultMap="ResultMap">
        <include refid="select_join"></include>
        join user_friend on article.author_id = user_friend.friend_id
        where user_friend.user_id = #{userId}
        <if test="dto.sinceId != null and dto.sinceId != 0">
            and (article.id &gt; #{dto.sinceId})
        </if>
        <if test="dto.maxId != null and dto.maxId != 0">
            and (article.id &lt; #{dto.maxId})
        </if>
        <if test="dto.authorId != null and dto.authorId != 0">
            and (article.author_id = #{dto.authorId})
        </if>
        <if test="dto.type != null">
            and (article.type = #{dto.type.value})
        </if>
        <if test="dto.type != null and dto.type.value == 0">
            and (image.id is not null)
        </if>
        <if test="dto.type == null">
            and (article.type = 1 or (article.type = 0 and image.id is not null))
        </if>
        <if test="dto.keyword != null">
            and (article.id = '${dto.keyword}' or article.content like CONCAT('%','${dto.keyword}','%'))
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="findByRandomInWeek" resultMap="ResultMap">
        <include refid="select_join"></include>
        <where>
            <if test="type != null">
                (article.type = #{type})
            </if>
            <if test="type != null and type == 0">
                and (image.id is not null)
            </if>
            <if test="type == null">
                and (article.type = 1 or (article.type = 0 and image.id is not null))
            </if>
        </where>
        order by rand()
    </select>
    <select id="find" resultMap="ResultMap">
        <include refid="select_join"></include>
        <if test="keyword != null">
            where article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%')
        </if>
        <if test="type == 0">
            and (image.id is not null)
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="findByType" resultMap="ResultMap">
        <include refid="select_join"></include>
        where article.type = #{type,jdbcType=INTEGER}
        <if test="type == 0">
            and (image.id is not null)
        </if>
        <if test="keyword != null">
            and (article.id = '${keyword}' or article.content like CONCAT('%','${keyword}','%'))
        </if>
        order by article.status desc, article.id desc
    </select>
    <select id="get" parameterType="java.lang.Long" resultMap="ResultMap">
        <include refid="select_join"></include>
        where article.id = #{id,jdbcType=BIGINT}
    </select>
    <select id="getByHashId" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from article
        where hash_id=#{hashId,jdbcType=VARCHAR}
    </select>
    <insert id="insertSelective" parameterType="com.izanpin.entity.Article">
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            <if test="content != null">
                content,
            </if>
            <if test="authorId != null">
                author_id,
            </if>
            <if test="authorName != null">
                author_name,
            </if>
            <if test="authorAvatar != null">
                author_avatar,
            </if>
            <if test="hashId != null">
                hash_id,
            </if>
            <if test="device != null">
                device,
            </if>
            <if test="commentCount != null">
                comment_count,
            </if>
            <if test="likeCount != null">
                like_count,
            </if>
            <if test="hateCount != null">
                hate_count,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="ip != null">
                ip,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{id,jdbcType=BIGINT},
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="authorId != null">
                #{authorId,jdbcType=BIGINT},
            </if>
            <if test="authorName != null">
                #{authorName,jdbcType=VARCHAR},
            </if>
            <if test="authorAvatar != null">
                #{authorAvatar,jdbcType=VARCHAR},
            </if>
            <if test="hashId != null">
                #{hashId,jdbcType=VARCHAR},
            </if>
            <if test="device != null">
                #{device,jdbcType=VARCHAR},
            </if>
            <if test="commentCount != null">
                #{commentCount,jdbcType=INTEGER},
            </if>
            <if test="likeCount != null">
                #{likeCount,jdbcType=INTEGER},
            </if>
            <if test="hateCount != null">
                #{hateCount,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="ip != null">
                #{ip,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="increaseCommentCount">
        update article set comment_count = comment_count + #{count}
        where id = #{id}
    </update>
    <update id="increaseLikeCount">
        update article set like_count = like_count + #{count}
        where id = #{id}
    </update>
    <update id="increaseHateCount">
        update article set hate_count = hate_count + #{count}
        where id = #{id}
    </update>
</mapper>